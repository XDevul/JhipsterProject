package com.jhipster.test.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class AlloyHttpAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAlloyHttpAllPropertiesEquals(AlloyHttp expected, AlloyHttp actual) {
        assertAlloyHttpAutoGeneratedPropertiesEquals(expected, actual);
        assertAlloyHttpAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAlloyHttpAllUpdatablePropertiesEquals(AlloyHttp expected, AlloyHttp actual) {
        assertAlloyHttpUpdatableFieldsEquals(expected, actual);
        assertAlloyHttpUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAlloyHttpAutoGeneratedPropertiesEquals(AlloyHttp expected, AlloyHttp actual) {
        assertThat(expected)
            .as("Verify AlloyHttp auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAlloyHttpUpdatableFieldsEquals(AlloyHttp expected, AlloyHttp actual) {
        assertThat(expected)
            .as("Verify AlloyHttp relevant properties")
            .satisfies(e -> assertThat(e.getName()).as("check name").isEqualTo(actual.getName()))
            .satisfies(e -> assertThat(e.getAddress()).as("check address").isEqualTo(actual.getAddress()))
            .satisfies(e -> assertThat(e.getModul()).as("check modul").isEqualTo(actual.getModul()))
            .satisfies(e -> assertThat(e.getApi()).as("check api").isEqualTo(actual.getApi()))
            .satisfies(e -> assertThat(e.getEnv()).as("check env").isEqualTo(actual.getEnv()))
            .satisfies(e -> assertThat(e.getHostname()).as("check hostname").isEqualTo(actual.getHostname()))
            .satisfies(e -> assertThat(e.getCreateTime()).as("check createTime").isEqualTo(actual.getCreateTime()))
            .satisfies(e -> assertThat(e.getUpdateTime()).as("check updateTime").isEqualTo(actual.getUpdateTime()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAlloyHttpUpdatableRelationshipsEquals(AlloyHttp expected, AlloyHttp actual) {}
}
